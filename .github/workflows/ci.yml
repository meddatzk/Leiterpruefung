name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PHP_VERSION: '8.1'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: meddatzk/leiterpruefung

jobs:
  # Code Quality und Linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json
        tools: composer:v2
    
    - name: Cache Composer Dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
    
    - name: Install PHP Dependencies
      run: composer install --prefer-dist --no-progress --no-suggest --no-interaction
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Node Dependencies
      run: npm install
    
    - name: PHP Syntax Check
      run: find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;
    
    - name: PHP CodeSniffer
      run: |
        if [ -f "vendor/bin/phpcs" ]; then
          vendor/bin/phpcs --standard=PSR12 --ignore=vendor/ .
        else
          echo "PHP CodeSniffer not installed, skipping..."
        fi
    
    - name: PHP Mess Detector
      run: |
        if [ -f "vendor/bin/phpmd" ]; then
          vendor/bin/phpmd . text cleancode,codesize,controversial,design,naming,unusedcode --exclude vendor/
        else
          echo "PHP Mess Detector not installed, skipping..."
        fi
    
    - name: Commit Message Check
      if: github.event_name == 'pull_request'
      run: |
        if [ -f "node_modules/.bin/commitlint" ]; then
          npm run commitlint -- --from=${{ github.event.pull_request.base.sha }} --to=${{ github.event.pull_request.head.sha }}
        else
          echo "Commitlint not available, skipping commit message check..."
        fi

  # Security Scans
  security:
    name: Security Scans
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json
        tools: composer:v2
    
    - name: Install Dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
    
    - name: Security Checker
      run: |
        if [ -f "vendor/bin/security-checker" ]; then
          vendor/bin/security-checker security:check composer.lock
        else
          echo "Security Checker not installed, skipping..."
        fi
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: leiterpruefung_test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json
        tools: composer:v2
        coverage: xdebug
    
    - name: Cache Composer Dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
    
    - name: Install Dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
    
    - name: Setup Test Environment
      run: |
        cp .env.example .env.test
        sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env.test
        sed -i 's/DB_DATABASE=.*/DB_DATABASE=leiterpruefung_test/' .env.test
        sed -i 's/DB_USERNAME=.*/DB_USERNAME=test/' .env.test
        sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=test/' .env.test
    
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P"3306" -u"test" -p"test" --silent; do
          sleep 1
        done
    
    - name: Setup Test Database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u test -ptest leiterpruefung_test < database/init/01_schema.sql
        mysql -h 127.0.0.1 -P 3306 -u test -ptest leiterpruefung_test < database/init/02_indexes.sql
        mysql -h 127.0.0.1 -P 3306 -u test -ptest leiterpruefung_test < database/init/03_procedures.sql
        mysql -h 127.0.0.1 -P 3306 -u test -ptest leiterpruefung_test < database/init/04_triggers.sql
    
    - name: Run PHPUnit Tests
      run: |
        vendor/bin/phpunit --configuration phpunit.xml --coverage-clover=coverage.xml --log-junit=test-results.xml
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: test-results.xml

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Test Environment
      run: |
        cp .env.example .env
        docker-compose up -d --build
    
    - name: Wait for Services
      run: |
        timeout 300 bash -c 'until docker-compose exec -T web curl -f http://localhost/health || exit 1; do sleep 5; done'
    
    - name: Run Integration Tests
      run: |
        docker-compose exec -T web php run-tests.php --integration
    
    - name: Collect Logs
      if: failure()
      run: |
        docker-compose logs > docker-logs.txt
    
    - name: Upload Logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: docker-logs
        path: docker-logs.txt
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Development Image
      run: |
        docker build -f docker/php/Dockerfile -t leiterpruefung:dev .
    
    - name: Build Production Image
      run: |
        docker build -f docker/php/Dockerfile.prod -t leiterpruefung:prod .
    
    - name: Test Development Image
      run: |
        docker run --rm -d --name test-dev -p 8080:80 leiterpruefung:dev
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop test-dev
    
    - name: Test Production Image
      run: |
        docker run --rm -d --name test-prod -p 8081:80 leiterpruefung:prod
        sleep 10
        curl -f http://localhost:8081/health || exit 1
        docker stop test-prod
    
    - name: Scan Development Image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'leiterpruefung:dev'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'
    
    - name: Scan Production Image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'leiterpruefung:prod'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Docker Environment
      run: |
        cp .env.example .env
        docker-compose up -d --build
    
    - name: Wait for Services
      run: |
        timeout 300 bash -c 'until docker-compose exec -T web curl -f http://localhost/health || exit 1; do sleep 5; done'
    
    - name: Install Apache Bench
      run: sudo apt-get update && sudo apt-get install -y apache2-utils
    
    - name: Run Performance Tests
      run: |
        # Homepage Performance Test
        ab -n 100 -c 10 http://localhost:8080/ > performance-home.txt
        
        # Login Page Performance Test
        ab -n 50 -c 5 http://localhost:8080/login.php > performance-login.txt
        
        # Dashboard Performance Test (would need authentication)
        # ab -n 50 -c 5 -C "session=test" http://localhost:8080/dashboard.php > performance-dashboard.txt
    
    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-*.txt
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  # Deployment Simulation
  deployment-test:
    name: Deployment Simulation
    runs-on: ubuntu-latest
    needs: [code-quality, security, unit-tests, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Simulate Production Deployment
      run: |
        # Build production image
        docker build -f docker/php/Dockerfile.prod -t leiterpruefung:latest .
        
        # Test production configuration
        cp .env.prod.example .env.prod
        docker-compose -f docker-compose.prod.yml config
        
        # Simulate deployment
        echo "✅ Production build successful"
        echo "✅ Configuration valid"
        echo "✅ Ready for deployment"

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, security, unit-tests, integration-tests, docker-build]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.code-quality.result == 'success' && needs.security.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "✅ All CI checks passed successfully!"
        echo "🚀 Ready for merge/deployment"
    
    - name: Notify Failure
      if: ${{ needs.code-quality.result == 'failure' || needs.security.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "❌ CI checks failed!"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        exit 1
