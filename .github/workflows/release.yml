name: Release Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to release'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto
        - major
        - minor
        - patch

env:
  PHP_VERSION: '8.1'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: meddatzk/leiterpruefung

jobs:
  # Version berechnen
  version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      previous_version: ${{ steps.version.outputs.previous_version }}
      version_changed: ${{ steps.version.outputs.version_changed }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Dependencies
      run: npm install
    
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
    
    - name: Calculate Version
      id: version
      run: |
        # Aktuelle Version aus version.json lesen
        if [ -f "version.json" ]; then
          CURRENT_VERSION=$(jq -r '.version' version.json)
        else
          CURRENT_VERSION="1.0.0"
        fi
        
        echo "previous_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Version-Type aus Input oder automatisch bestimmen
        VERSION_TYPE="${{ github.event.inputs.version_type }}"
        if [ -z "$VERSION_TYPE" ] || [ "$VERSION_TYPE" = "auto" ]; then
          # Automatische Versionierung basierend auf Commits
          chmod +x scripts/version.sh
          NEW_VERSION=$(./scripts/version.sh auto --dry-run | grep "Would update version to" | cut -d' ' -f5 || echo "$CURRENT_VERSION")
        else
          # Manuelle Versionierung
          chmod +x scripts/version.sh
          NEW_VERSION=$(./scripts/version.sh $VERSION_TYPE --dry-run | grep "Would update version to" | cut -d' ' -f5 || echo "$CURRENT_VERSION")
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Prüfen ob Version geändert wurde
        if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Current Version: $CURRENT_VERSION"
        echo "New Version: $NEW_VERSION"
        echo "Version Changed: $([ "$CURRENT_VERSION" != "$NEW_VERSION" ] && echo "true" || echo "false")"

  # Tests ausführen (nur wenn Version geändert)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: version
    if: needs.version.outputs.version_changed == 'true'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: leiterpruefung_test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json
        tools: composer:v2
    
    - name: Install Dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
    
    - name: Setup Test Environment
      run: |
        cp .env.example .env.test
        sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env.test
        sed -i 's/DB_DATABASE=.*/DB_DATABASE=leiterpruefung_test/' .env.test
        sed -i 's/DB_USERNAME=.*/DB_USERNAME=test/' .env.test
        sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=test/' .env.test
    
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P"3306" -u"test" -p"test" --silent; do
          sleep 1
        done
    
    - name: Setup Test Database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u test -ptest leiterpruefung_test < database/init/01_schema.sql
        mysql -h 127.0.0.1 -P 3306 -u test -ptest leiterpruefung_test < database/init/02_indexes.sql
        mysql -h 127.0.0.1 -P 3306 -u test -ptest leiterpruefung_test < database/init/03_procedures.sql
        mysql -h 127.0.0.1 -P 3306 -u test -ptest leiterpruefung_test < database/init/04_triggers.sql
    
    - name: Run Tests
      run: vendor/bin/phpunit --configuration phpunit.xml

  # Version aktualisieren
  update-version:
    name: Update Version
    runs-on: ubuntu-latest
    needs: [version, test]
    if: needs.version.outputs.version_changed == 'true' && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
    
    - name: Update Version Files
      run: |
        chmod +x scripts/version.sh
        
        # Version-Type bestimmen
        VERSION_TYPE="${{ github.event.inputs.version_type }}"
        if [ -z "$VERSION_TYPE" ] || [ "$VERSION_TYPE" = "auto" ]; then
          ./scripts/version.sh auto
        else
          ./scripts/version.sh $VERSION_TYPE
        fi
    
    - name: Commit Version Changes
      run: |
        git add version.json CHANGELOG.md package.json
        git commit -m "chore: bump version to ${{ needs.version.outputs.version }}"
        git push

  # Docker Images bauen
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [version, update-version]
    if: needs.version.outputs.version_changed == 'true'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        ref: main
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract Metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}},value=${{ needs.version.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.version.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.version.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and Push Production Image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/php/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.version.outputs.version }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

  # Git Tag erstellen
  create-tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    needs: [version, update-version]
    if: needs.version.outputs.version_changed == 'true'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        ref: main
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Create and Push Tag
      run: |
        git tag -a "v${{ needs.version.outputs.version }}" -m "Release ${{ needs.version.outputs.version }}"
        git push origin "v${{ needs.version.outputs.version }}"

  # GitHub Release erstellen
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version, update-version, build, create-tag]
    if: needs.version.outputs.version_changed == 'true'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        ref: main
    
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
    
    - name: Generate Release Notes
      id: release_notes
      run: |
        # Release Notes aus Changelog extrahieren
        VERSION="${{ needs.version.outputs.version }}"
        
        # Changelog-Abschnitt für diese Version extrahieren
        if [ -f "CHANGELOG.md" ]; then
          # Zeilen zwischen ## [VERSION] und nächstem ## extrahieren
          RELEASE_NOTES=$(awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md)
          
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="Release $VERSION"
          fi
        else
          RELEASE_NOTES="Release $VERSION"
        fi
        
        # Multiline-Output für GitHub Actions
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.version.outputs.version }}
        release_name: Release ${{ needs.version.outputs.version }}
        body: |
          ## Release ${{ needs.version.outputs.version }}
          
          ${{ steps.release_notes.outputs.notes }}
          
          ### Docker Images
          
          ```bash
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.version.outputs.version }}
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          ```
          
          ### Installation
          
          ```bash
          # Mit Docker Compose
          curl -O https://raw.githubusercontent.com/meddatzk/Leiterpruefung/v${{ needs.version.outputs.version }}/docker-compose.prod.yml
          docker-compose -f docker-compose.prod.yml up -d
          
          # Mit Git
          git clone https://github.com/meddatzk/Leiterpruefung.git
          cd Leiterpruefung
          git checkout v${{ needs.version.outputs.version }}
          ```
          
          ### Änderungen
          
          Vollständige Änderungen: [${{ needs.version.outputs.previous_version }}...v${{ needs.version.outputs.version }}](https://github.com/meddatzk/Leiterpruefung/compare/${{ needs.version.outputs.previous_version }}...v${{ needs.version.outputs.version }})
        draft: false
        prerelease: false

  # Deployment (optional)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [version, create-release]
    if: needs.version.outputs.version_changed == 'true' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Deploy to Production
      run: |
        echo "🚀 Deploying version ${{ needs.version.outputs.version }} to production..."
        echo "Docker Image: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.version.outputs.version }}"
        
        # Hier würde der tatsächliche Deployment-Code stehen
        # z.B. SSH zu Produktionsserver, Docker-Container aktualisieren, etc.
        
        echo "✅ Deployment completed successfully!"

  # Benachrichtigung
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [version, create-release, deploy]
    if: always() && needs.version.outputs.version_changed == 'true'
    
    steps:
    - name: Notify Success
      if: needs.create-release.result == 'success'
      run: |
        echo "🎉 Release ${{ needs.version.outputs.version }} erfolgreich erstellt!"
        echo "📦 Docker Images verfügbar unter: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.version.outputs.version }}"
        echo "🔗 Release: https://github.com/meddatzk/Leiterpruefung/releases/tag/v${{ needs.version.outputs.version }}"
    
    - name: Notify Failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "❌ Release ${{ needs.version.outputs.version }} fehlgeschlagen!"
        echo "Bitte Logs überprüfen und manuell beheben."
        exit 1

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [version, notify]
    if: always()
    
    steps:
    - name: Cleanup Artifacts
      run: |
        echo "🧹 Cleanup abgeschlossen"
        
        # Hier könnten temporäre Dateien, alte Docker Images, etc. bereinigt werden
        echo "Version: ${{ needs.version.outputs.version }}"
        echo "Version Changed: ${{ needs.version.outputs.version_changed }}"
