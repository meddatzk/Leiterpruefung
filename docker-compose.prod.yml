version: '3.8'

services:
  web:
    build:
      context: ./docker/php
      dockerfile: Dockerfile.prod
    container_name: leiter_web_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./web:/var/www/html:ro
      - ./docker/php/apache.prod.conf:/etc/apache2/sites-available/000-default.conf:ro
      - ./docker/php/apache.prod.conf:/etc/apache2/sites-available/default-ssl.conf:ro
      - ./ssl:/etc/ssl/certs/leiter:ro
      - ./logs/apache:/var/log/apache2
      - ./logs/php:/var/log/php
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - LDAP_HOST=${LDAP_HOST}
      - LDAP_PORT=${LDAP_PORT}
      - LDAP_BASE_DN=${LDAP_BASE_DN}
      - LDAP_BIND_DN=${LDAP_BIND_DN}
      - LDAP_BIND_PASSWORD=${LDAP_BIND_PASSWORD}
      - PHP_TIMEZONE=${PHP_TIMEZONE}
      - PHP_MEMORY_LIMIT=${PHP_MEMORY_LIMIT}
      - APACHE_SERVER_NAME=${APACHE_SERVER_NAME}
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_SECRET_KEY=${APP_SECRET_KEY}
      - SESSION_LIFETIME=${SESSION_LIFETIME}
      - COOKIE_SECURE=true
      - COOKIE_HTTPONLY=true
      - SSL_CERT_PATH=${SSL_CERT_PATH}
      - SSL_KEY_PATH=${SSL_KEY_PATH}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - leiter_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health.php"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run
      - /var/lock
      - /var/cache/apache2

  database:
    image: mysql:8.0
    container_name: leiter_mysql_prod
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_INNODB_BUFFER_POOL_SIZE=1G
      - MYSQL_INNODB_LOG_FILE_SIZE=256M
      - MYSQL_MAX_CONNECTIONS=200
      - MYSQL_QUERY_CACHE_SIZE=64M
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/config/my.cnf:/etc/mysql/conf.d/custom.cnf:ro
      - ./logs/mysql:/var/log/mysql
      - ./backups/mysql:/backups
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=1G
      --innodb-log-file-size=256M
      --max-connections=200
      --query-cache-size=64M
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/slow.log
      --long-query-time=2
      --log-error=/var/log/mysql/error.log
      --general-log=0
      --binlog-expire-logs-seconds=604800
    networks:
      - leiter_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:7-alpine
    container_name: leiter_redis_prod
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    networks:
      - leiter_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  nginx-proxy:
    image: nginx:alpine
    container_name: leiter_nginx_prod
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web
    networks:
      - leiter_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    security_opt:
      - no-new-privileges:true

  logrotate:
    image: alpine:latest
    container_name: leiter_logrotate_prod
    restart: unless-stopped
    volumes:
      - ./logs:/logs
      - ./scripts/logrotate.conf:/etc/logrotate.conf:ro
    command: >
      sh -c "
        apk add --no-cache logrotate &&
        while true; do
          logrotate -f /etc/logrotate.conf
          sleep 86400
        done
      "
    networks:
      - leiter_network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

volumes:
  mysql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/leiter_mysql_data
  redis_data:
    driver: local

networks:
  leiter_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
